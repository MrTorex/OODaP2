1. Каковы особенности использования динамической памяти в С++?

Особенности использования динамической памяти в C++:

- Динамическая память выделяется и освобождается вручную с помощью операторов new и delete.
- Возможность динамически изменять размеры выделенной памяти.
- Необходимость явного управления памятью для предотвращения утечек и ошибок.

2. С какой целью используются smart-указатели? Каковы особенности их использования? Что представляет собой smart-указатель?

Smart-указатели используются для автоматического управления динамической памятью и предотвращения утечек памяти. Особенности использования:

- Автоматическое освобождение памяти при выходе из области видимости или при уничтожении объекта.
- Обеспечение безопасного владения ресурсом.
- Smart-указатели представляют собой классы, которые оборачивают указатель и реализуют необходимую логику управления памятью.

3. Какие виды интеллектуальных указателей предоставляет библиотека С++?

Библиотека C++ предоставляет три основных вида интеллектуальных указателей: std::unique_ptr, std::shared_ptr и std::weak_ptr.

4. Какие методы должны быть реализованы в собственном классе «умного указателя»? Приведите пример реализации двух таких методов.

Методы, которые должны быть реализованы в собственном классе "умного указателя":

- Конструкторы и деструкторы.
- Операторы копирования и перемещения.

Пример:

class MySmartPointer {
public:
    MySmartPointer(int* ptr) : ptr_(ptr) {}
    ~MySmartPointer() { delete ptr_; }
    MySmartPointer(const MySmartPointer& other) : ptr_(new int(*other.ptr_)) {}
    MySmartPointer& operator=(const MySmartPointer& other) {
        if (this != &other) {
            delete ptr_;
            ptr_ = new int(*other.ptr_);
        }
        return *this;
    }
private:
    int* ptr_;
};

5. Каковы особенности использования указателя std::shared_ptr? Приведите пример его создания и инициализации.

Особенности использования указателя std::shared_ptr:

- Предоставляет общее владение ресурсом между несколькими std::shared_ptr.
- Автоматическое освобождение ресурса, когда все std::shared_ptr, владеющие им, уничтожены.

Пример:

#include <memory>

int main() {
    std::shared_ptr<int> sharedPtr(new int(42));
    return 0;
}

6. Каковы особенности использования указателя std::unique_ptr? Приведите пример его создания и инициализации.

Особенности использования указателя std::unique_ptr:

- Обеспечивает эксклюзивное владение ресурсом.
- Поддерживает передачу владения ресурсом при перемещении.

Пример:

#include <memory>

int main() {
    std::unique_ptr<int> uniquePtr(new int(42));
    return 0;
}

7. Каковы особенности использования указателя std::weak_ptr? Приведите пример его создания и инициализации.

Особенности использования указателя std::weak_ptr:

- Позволяет наблюдать за объектом, управляемым std::shared_ptr, без увеличения счетчика ссылок.
- Не влияет на продление жизни объекта.

Пример:

#include <memory>

int main() {
    std::shared_ptr<int> sharedPtr(new int(42));
    std::weak_ptr<int> weakPtr = sharedPtr;
    return 0;
}

8. Что такое утечка памяти в программировании? Приведи пример кода.

Утечка памяти в программировании - это ситуация, когда выделенная память не освобождается после того, как она больше не нужна программе.

Пример:

int main() {
    int* ptr = new int(42);
    // Забыли освободить память
    return 0;
}

9. Что такое висячий указатель в программировании? Приведи пример кода.

Висячий указатель - это указатель, который указывает на освобожденную память. Пример:

int* danglingPtr;
{
    int x = 42;
    danglingPtr = &x;
}
// danglingPtr теперь указывает на освобожденную память

10. Что собой представляет идиома программирования RAII?

Идиома программирования RAII (Resource Acquisition Is Initialization) заключается в том, что управление ресурсами связывается с временем жизни объекта. Ресурс освобождается автоматически при уничтожении объекта.

11. Что такое транзакция в программировании? В чем состоит механизм транзакций? Когда используются транзакции?

Транзакция в программировании - это логическая единица работы, которая должна быть выполнена полностью или не выполнена вообще. Механизм транзакций обеспечивает атомарность, согласованность, изолированность и долговечность операций. Транзакции используются в многопоточных и распределенных системах для обеспечения целостности данных.

12. Какие основные операции используются при реализации механизма транзакций? Приведите пример реализации одной из операций.

Основные операции при реализации механизма транзакций:

- Начало транзакции.
- Выполнение операций.
- Фиксация (commit) транзакции.
- Откат (rollback) транзакции в случае ошибки или отмены.

Пример:

// Псевдокод
begin_transaction();
// Выполнение операций
if (error_condition) {
    rollback_transaction();
} else {
    commit_transaction();
}